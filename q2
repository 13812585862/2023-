1.介绍路由的history
hash模式 ：使用 URL 的 hash 来模拟一个完整的 URL, 其显示的网络路径中会有 “#” 号。hash 虽然出现URL中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash后刷新, 也不会有
问题
history模式： 美化后的hash模式，路径中不包含“#”。依赖于Html5 的 history api。由于改变了地址, 刷新时会按照修改后的地址请求后端, 需要后端配置处理, 将地址访问做映射, 否则会404
补充：history.pushState(state, title[, url])。popstate类似于一个事件函数，当用户在浏览器点击后退、前进，或者在js中调用histroy.back()，history.go()，history.forward()等
，会触发popstate事件；但pushState、replaceState
不会触发这个事件。利用这一特性，我们可以在用户前进或者返回页面的时候做一些事情

2.redux数据流的流程
组件里都是通过 dispatch 一个 action 来触发 store 的修改，而且修改的逻辑都是在 reducer 里面，组件再监听 store 的数据变化，从中取出最新的数据。
这样数据流动是单向的，清晰的，很容易管理。这就像为什么我们在公司里想要什么权限都要走审批流，而不是直接找某人，一样的道理。集中管理流程比较清晰，而且还可以追溯
redux saga 的异步过程管理就是这样的：先把 action 透传给 store，然后判断 action 是否是被 taker 监听的，如果是，则调用对应的 worker saga 进行处理。
redux saga 在 redux 的 action 流程之外，加了一条监听 action 的异步处理的流程。
总结：
相比 context 的混乱的数据流，redux 的 view -> action -> store -> view 的单向数据流更清晰且容易管理。
前端代码中有很多异步过程，这些异步过程之间可能有串行、并行甚至更复杂的关系，放在组件里并不好管理，可以放在 redux 的中间件里。
redux 的中间件就是对 dispatch 的层层包装，比如 redux-thunk 就是判断了下 action 是 function 就执行下，否则就是继续 dispatch。
redux-thunk 并没有提供多个异步过程管理的机制，复杂异步过程的管理还是得用 redux-saga 或者 redux-observable。
redux-saga 透传了 action 到 store，并且监听 action 执行相应的异步过程。异步过程的描述使用 generator 的形式，好处是可测试性。
比如通过 take、takeEvery、takeLatest 来监听 action，然后执行 worker saga。worker saga 
可以用 put、call、fork 等 effect 来描述不同的副作用，由 task 负责执行。
redux-observable 同样监听了 action 执行相应的异步过程，但是是基于 rxjs 的 operator，相比 saga 来说，异步过程的管理功能更强大。
不管是 redux-saga 通过 generator 来组织异步过程，通过内置 effect 来处理多个异步过程之间的关系，还是 redux-observable 
通过 rxjs 的 operator 来组织异步过程和多个异步过程之间的关系。它们都解决了复杂异步过程的处理的问题，可以根据场景的复杂度灵活选用。

3.redux怎么实现组件通信，多个组件使用相同状态怎么管理
redux是通过属性传递数据实现的
react中使用redux
1.connect方法拓展组件 接收state 和dispatch
2.通过Provider组件提供store数据源
让其它组件接收state数据和dispatch方法两种方式
1.可以通过父子通信的方法，传递数据和方法
2.继续使用connect方法得到的高阶函数去拓展组件
多个组件实现数据共享，可以用
1定义一个Person组件，和Count组件通过redux共享数据。
2为Person组件编写：reducer、action，配置constant常量。
3️重点：Person的reducer和Count的Reducer要使用combineReducers进行合并。合并后的总状态是一个对象！！！
4️交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。

4.居中为什么使用transform不用margin
因为transfrom是独立的层，而margin会导致重绘和回流
transform:是通过创建一个renderLayers(渲染)合成层，拥有独立的graphicsLayers(绘图层)。每一个绘图层都有一个绘图区域，其对应的渲染会绘制进绘图区域，
合成器（compositor）最终会负责将由绘图区域输出的位图合并成最终屏幕展示图案。
margin会改变render的tree的结构，必定引起重绘和回流
上面提到的，transfrom实际上就用到GPU加速的。也就是会占用内存。由此可见创建绘图层，虽然洁身了layout,
但是layer创建的越多，占用内存的就会越大。而过多的渲染开销会超过性能的改善。
补充：解释一下什么样的条件是独立的合成层。
1.3D或者perspective transform的css属性层
2. video元素的层
3.canvas元素的层
4. flash
5.对opacity和transform应用的css动画层
6.使用css滤镜filters的层 
7 .有合成层后代的层
8. 同合成层重叠，且在该合成层上面渲染的层

5.常见的http请求头
1-1 Accept
1、 Accept ： text/html 浏览器可以接收服务器回发的类型为text/html
2、 Accept： */*代表浏览器可以处理所有类型
1-2 Accept-Encoding
1、 Accept-Encoding： gzip，deflate 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）
1-3 Accept-Language zh-CN,zh;q=0.9
1-4 Connection
1、 Connection: keep-alive 当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。
2、 Connection: close 代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。
1-5 Host (发送请求时，该报头域是必须)
1、 Host： 请求报头域主要用于指定该请求资源的Internet主机和端口号，通常从HTTP URL中提取出来
1-6 Referer
1、 Referer： 当浏览器向Web服务器发送请求时，一般会带上Refer，告诉服务器从哪个页面链接过来的，服务器可以获得一些信息用于处理
1-7 Cache-Control
1、 Cache-Control ：
Cache-Control:private ： 默认为private 响应只能够作为私有的缓存，不能再用户间共享
Cache-Control:public** **响应会被缓存，并且在多用户间共享。正常情况, 如果要求HTTP认证,响应会自动设置为 private.
Cache-Control:must-revalidate 响应在特定条件下会被重用，以满足接下来的请求，但是它必须到服务器端去验证它是不是仍然是最新的。
Cache-Control:no-cache 响应不会被缓存,而是实时向服务器端请求资源。
Cache-Control:max-age=10 设置缓存最大的有效时间，但是这个参数定义的是时间大小（比如：60）而不是确定的时间点。单位是[秒 seconds]。
Cache-Control:no-store在任何条件下，响应都不会被缓存，并且不会被写入到客户端的磁盘里，这也是基于安全考虑的某些敏感的响应才会使用这个。
1-8 Cookie
1、 Cookie是用来存储一些用户信息以便让服务器辨别用户身份的（大多数需要登录的网站上面会比较常见）
2、 例子： cookie会存储一些用户的用户名和密码，当用户登录后就会在客户端产生一个cookie来存储相关信息，这样浏览器通过读取cookie的信息去服务器上验证并通过后会判定你是合法用户
从而允许查看相应网页。
3、 还有很多信息可以存储是cookie里面，比如sessionid等。
4、 document.cookie = "name='ntt'; path='/frontend';expires='';secure"
1-9 Range（用于断点续传）
响应头：
Access-Control-Allow-Credentials
Access-Control-Allow-Credentials: true ，允许发送cookie。
Cookie不包括在CORS请求之中。
Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true
如果服务器不要浏览器发送Cookie，删除该字段即可。如果access-control-allow-origin为*，当前字段就不能为true
Vary是作为响应头由服务器端返回数据时添加的头部信息；
Vary头的内容来自于当前请求的Request头部Key，比如Accept-Encoding、User-Agent等；
缓存服务器进行某接口的网络请求结果数据缓存时，会将Vary一起缓存；
HTTP请求，缓存中Vary的内容会作为当前缓存数据是否可以作为请求结果返回给客户端的判断依据；
HTTP请求，响应数据中的Vary用来判断当前缓存中同请求的数据的Vary是否失效，如果缓存中的Vary与服务器刚拿到的Vary不一致，则可以进行更新。
当Vary的值为“*”，意味着请求头中的所有信息都不可作为是否从缓存服务器拿数据的判断依据。

6.dev-server是怎么跑起来的
  webpack-dev-server 可以作为命令行工具使用，核心模块依赖是 webpack 和 webpack-dev-middleware。webapck-dev-server 负责启动一个 express 服务器监听客户端请求
；实例化 webpack compiler；启动负责推送 webpack 编译信息的 webscoket 服务器；负责向 bundle.js 注入和服务端通信用的 webscoket 客户端代码和处理逻辑。
webapck-dev-middleware 把 webpack compiler 的 outputFileSystem 改为 in-memory fileSystem；启动 webpack watch 编译；处理浏览器发出的静态资源的请求，
把 webpack 输出到内存的文件响应给浏览器。
  每次 webpack 编译完成后向客户端广播 ok 消息，客户端收到信息后根据是否开启 hot 模式使用 liveReload 页面级刷新模式或者 hotReload 模块热替换。hotReload 存在失败的情况，
失败的情况下会降级使用页面级刷新。
  开启 hot 模式，即启用 HMR 插件。hot 模式会向服务器请求更新过后的模块，然后对模块的父模块进行回溯，对依赖路径进行判断，如果每条依赖路径都配置了模块更新后所需的业务处理回调函数
则是 accepted 状态，否则就降级刷新页面。判断 accepted 状态后对旧的缓存模块和父子依赖模块进行替换和删除，然后执行 accept 方法的回调函数，执行新模块代码，引入新模块，
执行业务处理代码。

7.for in of的区别
1.for in 循环下标 string类型不是number类型
forof   循环的是item
2.for in 可以获取原型上的所有的方法和属性   for of 不行 
3.for in 可以循环对象  for of会报错
引申：手写实现for of 报错
  Object.prototype[Symbol.iterator]=function(){
     let _this= this;
     let index = 0
     let length= Object.keys(_this).length
     return {
      next: ()=>{
       let value= _this[Object.keys(_this)[index]]
       let done = index >= length
       index++
       return {
        value , 
        done
       }
      }
     }
      }
    for(let i of {a:1,b:2}){
      console.log(i)
    }

8.webpack怎么跑起来
想要了解 webpack 的插件的机制，需要弄明白以下几个知识点：
1一个简单的插件的构成：plugins是可以用自身原型方法apply来实例化的对象。apply只在安装插件被Webpack compiler执行一次。apply方法传入一个webpck compiler的引用，来访问编译器回调。
2webpack构建流程
Webpack的基本构建流程如下：
校验配置文件 ：读取命令行传入或者webpack.config.js文件，初始化本次构建的配置参数
生成Compiler对象：执行配置文件中的插件实例化语句new MyWebpackPlugin()，为webpack事件流挂上自定义hooks
进入entryOption阶段：webpack开始读取配置的Entries，递归遍历所有的入口文件
run/watch：如果运行在watch模式则执行watch方法，否则执行run方法
compilation：创建Compilation对象回调compilation相关钩子，依次进入每一个入口文件(entry)，使用loader对文件进行编译。通过compilation我可以可以读取到module的resource
（资源路径）、loaders（使用的loader）等信息。再将编译好的文件内容使用acorn解析生成AST静态语法树。然后递归、重复的执行这个过程， 所有模块和和依赖分析完成后，
执行 compilation 的 seal 方法对每个 chunk 进行整理、优化、封装__webpack_require__来模拟模块化操作.
emit：所有文件的编译及转化都已经完成，包含了最终输出的资源，我们可以在传入事件回调的compilation.assets上拿到所需数据，其中包括即将输出的资源、代码块Chunk等等信息。
3Tapable是如何把各个插件串联到一起的
webpack中最核心的负责编译的Compiler和负责创建bundles的Compilation都是Tapable的实例，可以直接在 Compiler 和 Compilation 对象上广播和监听事件，方法如下：
compiler.apply('event-name',params);
compilation.apply('event-name',params);

扩展：Compiler 和 Compilation 的区别
Compiler 代表了整个 Webpack 从启动到关闭的生命周期，而 Compilation 只是代表了一次新的编译，只要文件有改动，compilation就会被重新创建。

扩展：先来分析一下webpack Plugin的工作原理
读取配置的过程中会先执行 new HelloPlugin(options) 初始化一个 HelloPlugin 获得其实例。
初始化 compiler 对象后调用 HelloPlugin.apply(compiler) 给插件实例传入 compiler 对象。
插件实例在获取到 compiler 对象后，就可以通过compiler.plugin(事件名称, 回调函数) 监听到 Webpack 广播出来的事件。 并且可以通过 compiler 对象去操作 Webpack。

9.webpack常用的插件和loader
webpack-dev-server
每当修改了源代码，webpack 会自动进行项目的打包和构建，意思就是原来修改了之后会有重新run一下dev才能更新样式到main .js中，现在有了这个插件就可以省去run这步了
html-webpack-plugin
webpack 中的 HTML 插件（类似于一个模板引擎插件）
可以通过此插件自定制index.html 页面的内容，自动监听源代码的内容，如果发生改变就立刻进行自动打包配置
css-loader less-loader
使用babel-loader处理JS高级语法

10.抽取公共文件怎么配置
 // 公共模块提取
    optimization: {
        splitChunks: {
            chunks: 'all'
        }
    }
    module.exports = {
    //...
    optimization: {
        splitChunks: {
            chunks: 'async',  // all async initial     选择对哪些块进行优化
            minSize: 30000,  // 被拆分的最小大小（压缩前）
            minChunks: 1,  // 被共享的最小次数
            maxAsyncRequests: 5,  // 最大按需求并行请次数
            maxInitialRequests: 3,  // 最大初始化并行请求数
            automaticNameDelimiter: '~',  // 自动命名分隔符
            name: true, // 自动为块命名
            cacheGroups: {
                vendor: { // key 为entry中定义的 入口名称
                    chunks: "initial", // 必须三选一： "initial" | "all" | "async"(默认就是异步)
                    test: /react|lodash/, // 正则规则验证，如果符合就提取 chunk
                    name: "vendor", // 要缓存的 分隔出来的 chunk 名称
                    minSize: 0,
                    minChunks: 1,
                    enforce: true,
                    maxAsyncRequests: 1, // 最大异步请求数， 默认1
                    maxInitialRequests : 1, // 最大初始化请求书，默认1
                    reuseExistingChunk: true // 可设置是否重用该chunk（查看源码没有发现默认值）
                },
                default: {
                    minChunks: 2,
                    priority: -20,
                    reuseExistingChunk: true
                }
            }
        }
    }
}
