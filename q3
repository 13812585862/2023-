1.深拷贝实现
  hh() {
      let obj = {
        a: 1,
        b: function() {},
        c: [
          {
            d: 1,
            e: { f: 3 }
          }
        ],
        g: null,
        j: undefined
      }

      const ss = this.DeepClone(obj)
      ss.c[0].d = 'hhhhhh'
      console.log('see', ss, obj === ss, ss.c[0].d, obj.c[0].d)
    },
    DeepClone(source) {
      let target = Array.isArray(source) ? [] : {}
      if (typeof source === 'object') {
        for (let key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            if (source[key] && typeof source[key] === 'object') {
              target[key] = this.DeepClone(source[key])
            } else {
              target[key] = source[key]
            }
          }
        }
      }
      return target
    },
2.函数科里化
curry(fn) {
      const len = fn.length //形参个数
      return function t() {
        let gs = arguments.length //实参个数
        let args = Array.prototype.slice.call(arguments) //伪数组转化为数组
        if (gs >= len) {
          return fn.apply(undefined, args)
        } else {
          return function() {
            const newArgs = args.concat(Array.prototype.slice.call(arguments))
            return t.apply(undefined, newArgs)
          }
        }
      }
    },
    add(a, b, c, d, e) {
      return a + b + c + d + e
    },
    sf() {
      const finallFun = this.curry(this.add)
      const result1 = finallFun(1)(2)(3)(4)(5)
      const result2 = finallFun(1, 2)(3, 4)(5)
      const result3 = finallFun(1)(2)(3)(4)(5)(6)
      console.log(result1, result2, result3)
    },

3.http1.1如何tcp复用
1.1中 connection默认是keep-alive即连接可以复用，不用每次新建连接和断开连接，复用的tcp连接长时间得不到响应会自动关闭
http1.1的长连接和http2.0的多路复用到底有啥区别？
长连接：同一个域名访问同一个文件的多个请求都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接）
依然存在的问题：1.多个请求只能被串行处理（数据基于文本，只能按顺序传输）；2.访问多个不同的文件依然会建立多个请求。
多路复用：同一个域名访问多个文件的请求也可以复用一个tcp连接，且多个请求可以被并行处理。
并行实现原理：http2.0引入二进制数据帧和流的概念（数据帧对每一个数据进行标识，可以不按顺序传输，从而实现并行）

tcp缓存的概念是由于客户端到和负载均衡传输速率低  负载均衡和服务器带宽高速率快，所以先把服务器结果缓存到负载均衡设备上，从而避免传输阻塞
ssl连接（https）  也是通过负载均衡在中间解密加密传输（非对称秘钥信息），从而保证传输安全性
